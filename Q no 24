Q no 24. 

Code:
/*
4
5
1 5 2 0
0 0 1 2
1 7 5 0
2 3 5 6
0 6 5 2
0 6 5 6
0 0 1 2
1 0 0 0
1 3 5 4
0 6 3 2
0 0 1 4
*/
#include<stdio.h>
int main()
{
    printf("This is second program to check whether a system is safe or not on given set of values.\n\n");
    int p;                  //to store total number of process..
    int r;                  //to store total types of resources used..
    printf("Enter the type of resources used here: ");
    scanf("%d",&r);
    printf("Enter the number of processes here: ");
    scanf("%d",&p);
    
    int avail[r];                           //to store the number of available resources of particular type..
    int md[p][r];                           //to store the maximum number of resources required by any process..
    int need[p][r];                         //to store the number of resources needed by any process..
    int all[p][r];                          //to sotre the number of resources already allocated to a process..

    //Input of availble resources
    printf("Kindly enter the available resources for each respected resourse type: \n");
    char rt=65;
    int i,j,k,y;
    for(i=0;i<r;i++)
    {
        printf("%c: ",rt);
        scanf("%d",&avail[i]);
        rt++;
    }

    //input of maximum resources required
    printf("\n\n Please enter the maximum demand in a sytem for each process:\n");
    
    for(i=0;i<p;i++)
    {
        printf("Kindly enter the max demand for process P%d : ",i+1);
        rt=65;
        for(j=0;j<r;j++)
        {
            scanf("%d",&md[i][j]);
        }
    }

    //input of already allocated resources
    printf("\n\n Please enter the number of resources of each type currently allocated...\n");
    for(i=0;i<p;i++)
    {
    	printf("Kindly enter the number of resources of allocated to process P%d : ",i+1);
        rt=65;
        for(j=0;j<r;j++)
        {
            scanf("%d",&all[i][j]);
        }
	}
    //calculation of needed resources for each process
    for(i=0;i<p;i++)
    {
        for(j=0;j<r;j++)
        {
            need[i][j]=md[i][j]-all[i][j];
        }
    }

    // Calculation of Safe procedure/sequence starts here..
    int f[p];               // to store the status whether the ith process is completed or not
    int ans[p];             // to store the safe sequence
    int ind=0;
    for(i=0;i<p;i++)
    {
        f[i]=0;
    }
    for (k=0;k<p;k++)
    {
        for (i=0;i<p;i++)
        {
            if (f[i]==0)
            {
                int flag = 0;
                for (j = 0; j < r; j++)
                {
                	if (need[i][j] > avail[j])
                    {
                        flag = 1;
                        break;
                    }
                }
                if (flag == 0)
                {
                	ans[ind++] = i;
                	for (y = 0; y < r; y++)
                	{
                	avail[y] += all[i][y];
					}
                	f[i] = 1;
                }
            }
        }
    }
    int notsafe=0;
    for(i=0;i<p;i++)
    {
        if(f[i]==0)
        {
        	notsafe++;
        }
    }
    if(notsafe==0)
    {
        printf("\n\nThe given values have a safe sequence.....\n");
        printf("The SAFE Sequence is: ");
        for (i=0;i<p-1; i++)
        {
            printf("P%d ->",ans[i]);
        }
        printf("P%d\n",ans[p-1]);
    }
    else
    {
        printf("\n\nOhhhh dear! The given values don't have a safe sequence.");
    }
    return 0;
}
